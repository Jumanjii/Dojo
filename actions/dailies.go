package actions

import (
	"time"

	"github.com/Jumanjii/dojo/models"
	"github.com/gobuffalo/buffalo"
	"github.com/gobuffalo/pop"
	"github.com/pkg/errors"
)

// This file is generated by Buffalo. It offers a basic structure for
// adding, editing and deleting a page. If your model is more
// complex or you need more than the basic implementation you need to
// edit this file.

// Following naming logic is implemented in Buffalo:
// Model: Singular (Daily)
// DB Table: Plural (dailies)
// Resource: Plural (Dailies)
// Path: Plural (/dailies)
// View Template Folder: Plural (/templates/dailies/)

// DailiesResource is the resource for the Daily model
type DailiesResource struct {
	buffalo.Resource
}

func getDueDate(d models.Daily) string {
	dueDate := d.ResetAt.Add(time.Hour * time.Duration(d.Recurrence))
	return dueDate.Format("Mon, 02 Jan 2006 15:04:05")
}

func dueDatePassed(d models.Daily) bool {
	dueDate := d.ResetAt.Add(time.Hour * time.Duration(d.Recurrence))
	if time.Now().Before(dueDate) {
		return false
	}

	return true
}

func now() time.Time {
	return time.Now()
}

// List gets all Dailies. This function is mapped to the path
// GET /dailies
func (v DailiesResource) List(c buffalo.Context) error {
	// Get the DB connection from the context
	tx, ok := c.Value("tx").(*pop.Connection)
	if !ok {
		return errors.WithStack(errors.New("no transaction found"))
	}

	dailies := &models.Dailies{}

	// Paginate results. Params "page" and "per_page" control pagination.
	// Default values are "page=1" and "per_page=20".
	q := tx.PaginateFromParams(c.Params())

	// Retrieve all Dailies from the DB
	if err := q.All(dailies); err != nil {
		return errors.WithStack(err)
	}

	// Add the paginator to the context so it can be used in the template.
	c.Set("pagination", q.Paginator)

	c.Set("dueDatePassed", dueDatePassed)
	c.Set("getDueDate", getDueDate)
	c.Set("now", now)

	return c.Render(200, r.Auto(c, dailies))
}

// Show gets the data for one Daily. This function is mapped to
// the path GET /dailies/{daily_id}
func (v DailiesResource) Show(c buffalo.Context) error {
	// Get the DB connection from the context
	tx, ok := c.Value("tx").(*pop.Connection)
	if !ok {
		return errors.WithStack(errors.New("no transaction found"))
	}

	// Allocate an empty Daily
	daily := &models.Daily{}

	// To find the Daily the parameter daily_id is used.
	if err := tx.Find(daily, c.Param("daily_id")); err != nil {
		return c.Error(404, err)
	}

	return c.Render(200, r.Auto(c, daily))
}

// New renders the form for creating a new Daily.
// This function is mapped to the path GET /dailies/new
func (v DailiesResource) New(c buffalo.Context) error {
	return c.Render(200, r.Auto(c, &models.Daily{}))
}

// Create adds a Daily to the DB. This function is mapped to the
// path POST /dailies
func (v DailiesResource) Create(c buffalo.Context) error {
	// Allocate an empty Daily
	daily := &models.Daily{}

	// Bind daily to the html form elements
	if err := c.Bind(daily); err != nil {
		return errors.WithStack(err)
	}

	// Get the DB connection from the context
	tx, ok := c.Value("tx").(*pop.Connection)
	if !ok {
		return errors.WithStack(errors.New("no transaction found"))
	}

	// Validate the data from the html form
	verrs, err := tx.ValidateAndCreate(daily)
	if err != nil {
		return errors.WithStack(err)
	}

	if verrs.HasAny() {
		// Make the errors available inside the html template
		c.Set("errors", verrs)

		// Render again the new.html template that the user can
		// correct the input.
		return c.Render(422, r.Auto(c, daily))
	}

	// If there are no errors set a success message
	c.Flash().Add("success", "Daily was created successfully")

	// and redirect to the dailies index page
	return c.Render(201, r.Auto(c, daily))
}

// Edit renders a edit form for a Daily. This function is
// mapped to the path GET /dailies/{daily_id}/edit
func (v DailiesResource) Edit(c buffalo.Context) error {
	// Get the DB connection from the context
	tx, ok := c.Value("tx").(*pop.Connection)
	if !ok {
		return errors.WithStack(errors.New("no transaction found"))
	}

	// Allocate an empty Daily
	daily := &models.Daily{}

	if err := tx.Find(daily, c.Param("daily_id")); err != nil {
		return c.Error(404, err)
	}

	return c.Render(200, r.Auto(c, daily))
}

// Update changes a Daily in the DB. This function is mapped to
// the path PUT /dailies/{daily_id}
func (v DailiesResource) Update(c buffalo.Context) error {
	// Get the DB connection from the context
	tx, ok := c.Value("tx").(*pop.Connection)
	if !ok {
		return errors.WithStack(errors.New("no transaction found"))
	}

	// Allocate an empty Daily
	daily := &models.Daily{}

	if err := tx.Find(daily, c.Param("daily_id")); err != nil {
		return c.Error(404, err)
	}

	// Bind Daily to the html form elements
	if err := c.Bind(daily); err != nil {
		return errors.WithStack(err)
	}

	verrs, err := tx.ValidateAndUpdate(daily)
	if err != nil {
		return errors.WithStack(err)
	}

	if verrs.HasAny() {
		// Make the errors available inside the html template
		c.Set("errors", verrs)

		// Render again the edit.html template that the user can
		// correct the input.
		return c.Render(422, r.Auto(c, daily))
	}

	// If there are no errors set a success message
	c.Flash().Add("success", "Daily was updated successfully")

	// and redirect to the dailies index page
	return c.Render(200, r.Auto(c, daily))
}

// Destroy deletes a Daily from the DB. This function is mapped
// to the path DELETE /dailies/{daily_id}
func (v DailiesResource) Destroy(c buffalo.Context) error {
	// Get the DB connection from the context
	tx, ok := c.Value("tx").(*pop.Connection)
	if !ok {
		return errors.WithStack(errors.New("no transaction found"))
	}

	// Allocate an empty Daily
	daily := &models.Daily{}

	// To find the Daily the parameter daily_id is used.
	if err := tx.Find(daily, c.Param("daily_id")); err != nil {
		return c.Error(404, err)
	}

	if err := tx.Destroy(daily); err != nil {
		return errors.WithStack(err)
	}

	// If there are no errors set a flash message
	c.Flash().Add("success", "Daily was destroyed successfully")

	// Redirect to the dailies index page
	return c.Render(200, r.Auto(c, daily))
}
